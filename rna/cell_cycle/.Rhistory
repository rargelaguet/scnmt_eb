print(p)
dev.off()
#####################
## Define settings ##
#####################
## Define I/O ##
io <- list()
if (grepl("ricard",Sys.info()['nodename'])) {
io$basedir <- "/Users/ricard/data/gastrulation_E3.5"
io$gene_metadata <- "/Users/ricard/data/ensembl/mouse/v87/BioMart/mRNA/Mmusculus_genes_BioMart.87.txt"
io$outdir <- "/Users/ricard/data/gastrulation_E3.5/mofa"
} else {
stop()
# io$basedir <- "/hps/nobackup/stegle/users/ricard/gastrulation_E3.5"
# io$gene_metadata <- "/hps/nobackup/stegle/users/ricard/ensembl/mouse/v87/BioMart/mRNA/Mmusculus_genes_BioMart.87.txt"
# io$outdir <- "/hps/nobackup/stegle/users/ricard/gastrulation/metaccrna/mofa"
}
io$sample.metadata <- paste0(io$basedir,"/sample_metadata.txt")
io$met.dir <- paste0(io$basedir,"/met/parsed")
io$acc.dir <- paste0(io$basedir,"/acc/parsed")
io$met.stats <- paste0(io$basedir,"/met/stats/samples/sample_stats.txt")
io$acc.stats <- paste0(io$basedir,"/acc/stats/samples/sample_stats.txt")
io$rna.file <- paste0(io$basedir,"/rna/parsed/SingleCellExperiment.rds")
io$annos_dir  <- paste0(io$basedir, "/features/filt")
## Define options ##
opts <- list()
# Define which annotations to look at
opts$met.annos <- c(
# "genebody",
"prom_2000_2000",
"H3K27ac_distal_E7.5_Mes_intersect12_500",
"H3K27ac_distal_E7.5_Ect_intersect12_500",
"H3K27ac_distal_E7.5_End_intersect12_500"
)
opts$acc.annos <- c(
# "genebody",
"prom_2000_2000",
"H3K27ac_distal_E7.5_Mes_intersect12",
"H3K27ac_distal_E7.5_Ect_intersect12",
"H3K27ac_distal_E7.5_End_intersect12"
)
# Define which stage and lineages to look at
opts$stage_lineage <- c(
# E3.5
"E3.5_ICM",
# E4.5
"E4.5_Epiblast",
"E4.5_Primitive_endoderm"
)
# Filtering options for methylation
opts$met_min.CpGs <- 1        # minimum number of CpG sites per feature
opts$met_min.cells <- 15      # minimum number of cells per feature
opts$met_nfeatures <- 1000    # maximum number of features per view (filter based on variance)
# Filtering options for accessibility
opts$acc_min.GpCs <- 5        # minimum number of GpC sites per feature
opts$acc_min.cells <- 15      # minimum number of cells per feature
opts$acc_nfeatures <- 1000    # maximum number of features per view (filter based on variance)
# Filtering options for RNA
opts$rna_min.cdr <- 0.25      # Remove genes with cellular detection rate smaller than opts$min.cdr
opts$rna_ngenes <- 2500       # maximum number of genes (filter based on variance)
# Define colors
# opts$colors <- c(
#   "Epiblast"="grey70",
#   "Mesoderm"="#CD3278",
#   "Primitive Streak"="sandybrown",
#   "Endoderm"="#43CD80",
#   "Ectoderm"="steelblue"
# )
# window length for the overlap between genes and features
opts$overlapGenes  <- FALSE
opts$gene_window  <- 5e4
# Define which cells to use
tmp <- fread(io$sample.metadata) %>%
.[,stage_lineage:=as.factor(paste(stage,lineage10x_2,sep="_"))] %>%
.[stage_lineage%in%opts$stage_lineage]
opts$met_cells <- tmp %>% .[pass_metQC==T, id_met]
opts$rna_cells <- tmp %>% .[pass_rnaQC==T, id_rna]
opts$acc_cells <- tmp %>% .[pass_accQC==T, id_acc]
##########################
## Load sample metadata ##
##########################
sample_metadata <- fread(io$sample.metadata) %>%
.[,stage_lineage:=as.factor(paste(stage,lineage10x_2,sep="_"))] %>%
.[id_met%in%opts$met_cells | id_rna %in% opts$rna_cells | id_acc %in% opts$acc_cells ] %>%
droplevels()
matrix.please <- function(x) {
m<-as.matrix(x[,-1])
rownames(m)<-x[[1]]
m
}
# Load Methylation data
met_dt <- lapply(opts$met.annos, function(n) {
data <- fread(sprintf("%s/%s.tsv.gz",io$met.dir,n)) %>% .[V1%in%opts$met_cells]
}) %>% rbindlist %>% setnames(c("id_met","id","anno","Nmet","N","rate"))
#####################
## Define settings ##
#####################
## Define I/O ##
io <- list()
if (grepl("ricard",Sys.info()['nodename'])) {
io$basedir <- "/Users/ricard/data/gastrulation_E3.5"
io$gene_metadata <- "/Users/ricard/data/ensembl/mouse/v87/BioMart/mRNA/Mmusculus_genes_BioMart.87.txt"
io$outdir <- "/Users/ricard/data/gastrulation_E3.5/mofa"
} else {
stop()
# io$basedir <- "/hps/nobackup/stegle/users/ricard/gastrulation_E3.5"
# io$gene_metadata <- "/hps/nobackup/stegle/users/ricard/ensembl/mouse/v87/BioMart/mRNA/Mmusculus_genes_BioMart.87.txt"
# io$outdir <- "/hps/nobackup/stegle/users/ricard/gastrulation/metaccrna/mofa"
}
io$sample.metadata <- paste0(io$basedir,"/sample_metadata.txt")
io$met.dir <- paste0(io$basedir,"/met/feature_level")
io$acc.dir <- paste0(io$basedir,"/acc/feature_level")
io$met.stats <- paste0(io$basedir,"/met/stats/sample_stats2.txt")
io$acc.stats <- paste0(io$basedir,"/acc/stats/sample_stats2.txt")
io$rna.file <- paste0(io$basedir,"/rna/SingleCellExperiment.rds")
io$annos_dir  <- paste0(io$basedir, "/features/filt")
## Define options ##
opts <- list()
# Define which annotations to look at
opts$met.annos <- c(
# "genebody",
"prom_2000_2000",
"H3K27ac_distal_E7.5_Mes_intersect12_500",
"H3K27ac_distal_E7.5_Ect_intersect12_500",
"H3K27ac_distal_E7.5_End_intersect12_500"
)
opts$acc.annos <- c(
# "genebody",
"prom_2000_2000",
"H3K27ac_distal_E7.5_Mes_intersect12",
"H3K27ac_distal_E7.5_Ect_intersect12",
"H3K27ac_distal_E7.5_End_intersect12"
)
# Define which stage and lineages to look at
opts$stage_lineage <- c(
# E3.5
"E3.5_ICM",
# E4.5
"E4.5_Epiblast",
"E4.5_Primitive_endoderm"
)
# Filtering options for methylation
opts$met_min.CpGs <- 1        # minimum number of CpG sites per feature
opts$met_min.cells <- 15      # minimum number of cells per feature
opts$met_nfeatures <- 1000    # maximum number of features per view (filter based on variance)
# Filtering options for accessibility
opts$acc_min.GpCs <- 5        # minimum number of GpC sites per feature
opts$acc_min.cells <- 15      # minimum number of cells per feature
opts$acc_nfeatures <- 1000    # maximum number of features per view (filter based on variance)
# Filtering options for RNA
opts$rna_min.cdr <- 0.25      # Remove genes with cellular detection rate smaller than opts$min.cdr
opts$rna_ngenes <- 2500       # maximum number of genes (filter based on variance)
# Define colors
# opts$colors <- c(
#   "Epiblast"="grey70",
#   "Mesoderm"="#CD3278",
#   "Primitive Streak"="sandybrown",
#   "Endoderm"="#43CD80",
#   "Ectoderm"="steelblue"
# )
# window length for the overlap between genes and features
opts$overlapGenes  <- FALSE
opts$gene_window  <- 5e4
# Define which cells to use
tmp <- fread(io$sample.metadata) %>%
.[,stage_lineage:=as.factor(paste(stage,lineage10x_2,sep="_"))] %>%
.[stage_lineage%in%opts$stage_lineage]
opts$met_cells <- tmp %>% .[pass_metQC==T, id_met]
opts$rna_cells <- tmp %>% .[pass_rnaQC==T, id_rna]
opts$acc_cells <- tmp %>% .[pass_accQC==T, id_acc]
##########################
## Load sample metadata ##
##########################
sample_metadata <- fread(io$sample.metadata) %>%
.[,stage_lineage:=as.factor(paste(stage,lineage10x_2,sep="_"))] %>%
.[id_met%in%opts$met_cells | id_rna %in% opts$rna_cells | id_acc %in% opts$acc_cells ] %>%
droplevels()
# Load Methylation data
met_dt <- lapply(opts$met.annos, function(n) {
data <- fread(sprintf("%s/%s.tsv.gz",io$met.dir,n)) %>% .[V1%in%opts$met_cells]
}) %>% rbindlist %>% setnames(c("id_met","id","anno","Nmet","N","rate"))
# Load Accessibility data
acc_dt <- lapply(opts$acc.annos, function(n) {
data <- fread(sprintf("%s/%s.tsv.gz",io$acc.dir,n)) %>% .[V1%in%opts$acc_cells]
}) %>% rbindlist %>% setnames(c("id_acc","id","anno","Nmet","N","rate"))
# Load RNA data
sce <- readRDS(io$rna.file) %>% .[,opts$rna_cells]
# Load annotation metadata
feature_metadata <- lapply(unique(c(opts$met.annos,opts$acc.annos)), function(i)
fread(sprintf("%s/%s.bed",io$annos_dir,i), stringsAsFactors=T)[,c(1,2,3,4,5,6)]) %>%
rbindlist %>% setnames(c("chr","start","end","strand","id","anno"))
# Load gene metadata
gene_metadata <- fread(io$gene_metadata) %>%
setnames(c("ens_id","symbol"),c("id","gene")) %>%
.[,chr:=as.factor(sub("chr","",chr))]
################
## Parse data ##
################
# Parse gene and feature metadata
feature_metadata_filt.met <- feature_metadata %>% split(.$anno) %>%
map2(.,names(.), function(x,y) x[id %in% met_dt[anno==y,id]] ) %>%
rbindlist
feature_metadata_filt.acc <- feature_metadata %>% split(.$anno) %>%
map2(.,names(.), function(x,y) x[id %in% acc_dt[anno==y,id]] ) %>%
rbindlist
gene_metadata_filt <- gene_metadata %>% .[,c("chr","start","end","gene")] %>%
.[,c("start", "end") := list(start-opts$gene_window, end+opts$gene_window)] %>%
setkey(chr,start,end)
## Parse RNA expression data ##
# Convert to data.table
rna_dt <- exprs(sce) %>% t %>% as.data.table(keep.rownames = "id_rna") %>%
melt(id.vars = "id_rna", value.name = "expr", variable.name = "ens_id") %>%
merge(rowData(sce) %>% as.data.frame(row.names = rownames(sce)) %>% tibble::rownames_to_column("ens_id") %>% .[,c("symbol","ens_id")] %>% setnames("symbol","gene"))
# rna_dt[,c("id_rna","gene","ens_id"):=list(as.factor(id_rna),as.factor(gene),as.factor(ens_id))]
## Parse accessibility data ##
acc_dt[,m:=log2(((rate/100)+0.01)/(1-(rate/100)+0.01))] # Calculate M value from Beta value
## Parse methylation data ##
met_dt[,m:=log2(((rate/100)+0.01)/(1-(rate/100)+0.01))] # Calculate M value from Beta value
acc_dt <- merge(acc_dt, sample_metadata[,c("sample","id_acc","stage","stage_lineage")], by="id_acc") %>% droplevels()
met_dt <- merge(met_dt, sample_metadata[,c("sample","id_met","stage","stage_lineage")], by="id_met") %>% droplevels()
rna_dt <- merge(rna_dt, sample_metadata[,c("sample","id_rna","stage","stage_lineage")], by="id_rna") %>% droplevels()
# Methylation
if (opts$overlapGenes) {
met_list <- list()
for (i in unique(met_dt$anno)){
# Subset corresponding anno
met_tmp <- met_dt[anno==i, ]
# Non gene-associated feature
if (all(grepl("ENSMUSG", unique(met_tmp$id)) == FALSE)) {
# Extract coordiantes for methylation sites and for genes
feature_metadata_tmp <- feature_metadata_filt.met[anno==i, c("chr","start","end","id")] %>%
.[,c("start","end") := list(start - opts$gene_window, end + opts$gene_window)] %>% setkey(chr,start,end)
# Do the overlap
ov <- foverlaps(
gene_metadata_filt,
feature_metadata_tmp,
nomatch=0) %>% .[,c("gene", "id")]
# If a feature overlaps with multiple genes, collapse them
ov1 <- ov[is.na(gene)]
ov2 <- ov[!is.na(gene)] %>% .[,.(gene=paste(gene,collapse="_")), by="id"]
ov <- rbind(ov1,ov2)
# Merge with methylation data
met_list[[i]] <- merge(met_tmp, ov, by="id", allow.cartesian=T)
}
# Gene-associated feature
else if (all(grepl("ENSMUSG", unique(met_tmp$id)) == TRUE)) {
met_list[[i]] <- merge(met_tmp, gene_metadata[,c("id","gene")], by="id")
}
}
met_dt <- rbindlist(met_list)
rm(met_list, met_tmp,feature_metadata_tmp,ov)
} else {
met_dt[,gene:="NA"]
}
# Accessibility
if (opts$overlapGenes) {
acc_list <- list()
for (i in unique(acc_dt$anno)){
# Subset corresponding anno
acc_tmp <- acc_dt[anno==i, ]
# Non gene-associated feature
if (all(grepl("ENSMUSG", unique(acc_tmp$id)) == FALSE)) {
# Extract coordiantes for methylation sites and for genes
feature_metadata_tmp <- feature_metadata_filt.acc[anno==i, c("chr","start","end","id")] %>%
.[,c("start","end") := list(start - opts$gene_window, end + opts$gene_window)] %>% setkey(chr,start,end)
# Do the overlap
ov <- foverlaps(
gene_metadata_filt,
feature_metadata_tmp,
nomatch=0) %>% .[,c("gene", "id")]
# If a feature overlaps with multiple genes, collapse them
ov1 <- ov[is.na(gene)]
ov2 <- ov[!is.na(gene)] %>% .[,.(gene=paste(gene,collapse="_")), by="id"]
ov <- rbind(ov1,ov2)
# Merge with methylation data
acc_list[[i]] <- merge(acc_tmp, ov, by="id", allow.cartesian=T)
}
# Gene-associated feature
else if (all(grepl("ENSMUSG", unique(acc_tmp$id)) == TRUE)) {
acc_list[[i]] <- merge(acc_tmp, gene_metadata[,c("id","gene")], by="id")
}
}
acc_dt <- rbindlist(acc_list)
rm(acc_list, acc_tmp,feature_metadata_tmp,ov)
} else {
acc_dt[,gene:="NA"]
}
#############################
## Filter methylation data ##
#############################
# Filter features by minimum number of CpGs
met_dt <- met_dt[N>=opts$met_min.CpGs]
# Filter features by  minimum number of cells
met_dt[,N:=.N,by=c("id","anno","gene")]  %>% .[N>=opts$met_min.cells] %>% .[,N:=NULL]
# Filter features by variance
met_dt <- met_dt[,var:=var(m), by=c("id","anno")] %>% .[var>0] %>% .[,var:=NULL] %>% droplevels()
Filter features by minimum number of GpCs
acc_dt <- acc_dt[N>=opts$acc_min.GpCs]
# Filter features by  minimum number of cells
acc_dt[,N:=.N,by=c("id","anno","gene")]  %>% .[N>=opts$acc_min.cells] %>% .[,N:=NULL]
# Filter features by variance
acc_dt <- acc_dt[,var:=var(m), by=c("id","anno")] %>% .[var>0] %>% .[,var:=NULL] %>% droplevels()
# Remove lowly expressed genes
rna_dt <- rna_dt[,mean:=mean(expr),by="ens_id"] %>% .[mean>0.1] %>% .[,mean:=NULL]
# Remove genes with constant expression levels
rna_dt <- rna_dt[,var:=var(expr),by="ens_id"] %>% .[var>0.1] %>% .[,var:=NULL]
# Filter genes with low cellular detection rate and sites with low coverage across samples
rna_dt <- rna_dt[,cdr:=sum(expr>0)/length(opts$rna_cells), by="ens_id"] %>% .[cdr>=opts$rna_min.cdr] %>% .[,cdr:=NULL]
# Extract top N highly variable genes
rna_dt <- rna_dt[,var:=var(expr), by="ens_id"] %>% .[var>0] %>% .[,var:=NULL] %>% droplevels()
foo <- data.table(id_rna=colnames(sce), covariate=sce$total_features_by_counts/nrow(sce))
rna_dt <- rna_dt %>% merge(foo, by="id_rna") %>%
.[,expr:=lm(formula=expr~covariate)[["residuals"]], by=c("gene")] %>%
.[,covariate:=NULL]
# RNA: Extract top N highly variable genes
keep_hv_genes <- rna_dt[,.(var=var(expr)), by="ens_id"] %>% setorder(-var) %>% head(n=opts$rna_ngenes) %>% .$ens_id
rna_dt <- rna_dt[ens_id%in%as.character(keep_hv_genes)] %>% droplevels()
# Accessibility: Extract top N most variable features
keep_hv_sites <- acc_dt %>% split(.$anno) %>% map(~ .[,.(var=var(m)), by="id"] %>% setorder(-var) %>% head(n=opts$acc_nfeatures) %>% .$id)
acc_dt <- acc_dt %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[id %in% keep_hv_sites[[y]]]) %>% rbindlist %>% droplevels()
# Methylation: Extract top N most variable features
keep_hv_sites <- met_dt %>% split(.$anno) %>% map(~ .[,.(var=var(m)), by="id"] %>% setorder(-var) %>% head(n=opts$met_nfeatures) %>% .$id)
met_dt <- met_dt %>% split(.$anno) %>% map2(.,names(.), function(x,y) x[id %in% keep_hv_sites[[y]]]) %>% rbindlist %>% droplevels()
met_cells <- as.character(unique(met_dt$sample))
rna_cells <- as.character(unique(rna_dt$sample))
acc_cells <- as.character(unique(acc_dt$sample))
rna_matrix <- rna_dt[,c("gene","expr","sample")] %>%
.[,c("sample","gene"):=list(as.character(sample),as.character(gene))] %>%
.[,sample:=factor(sample,levels=Reduce(union,list(rna_cells,acc_cells,met_cells)))] %>%
dcast(sample~gene, value.var="expr", drop=F) %>% matrix.please() %>% t
met_matrix_list <- list()
for (n in unique(met_dt$anno)) {
met_matrix_list[[paste("met",n,sep="_")]] <- met_dt[anno==n,c("id","gene","m","sample")] %>%
.[,c("sample","gene","id"):=list(as.character(sample),as.character(gene),as.character(id))] %>%
.[,sample:=factor(sample,levels=Reduce(union,list(rna_cells,acc_cells,met_cells)))] %>%
.[,id_gene:=paste(id,gene,sep="_")] %>%
dcast(sample~id_gene, value.var="m", drop=F) %>% matrix.please() %>% t
cat(sprintf("%s methylation matrix has dim (%d,%d) with %0.02f%% missing values \n", n,
nrow(met_matrix_list[[paste("met",n,sep="_")]]), ncol(met_matrix_list[[paste("met",n,sep="_")]]),
100*mean(is.na(met_matrix_list[[paste("met",n,sep="_")]]))))
}
cat("\n")
acc_matrix_list <- list()
for (n in unique(acc_dt$anno)) {
acc_matrix_list[[paste("acc",n,sep="_")]] <- acc_dt[anno==n,c("id","gene","m","sample")] %>%
.[,c("sample","gene","id"):=list(as.character(sample),as.character(gene),as.character(id))] %>%
.[,sample:=factor(sample,levels=Reduce(union,list(rna_cells,acc_cells,met_cells)))] %>%
.[,id_gene:=paste(id,gene,sep="_")] %>%
dcast(sample~id_gene, value.var="m", drop=F) %>% matrix.please() %>% t
cat(sprintf("%s accessibility matrix has dim (%d,%d) with %0.02f%% missing values \n", n,
nrow(acc_matrix_list[[paste("acc",n,sep="_")]]), ncol(acc_matrix_list[[paste("acc",n,sep="_")]]),
100*mean(is.na(acc_matrix_list[[paste("acc",n,sep="_")]]))))
}
all_matrix_list <- c(rna=list(rna_matrix),met_matrix_list,acc_matrix_list)
suppressMessages(library(MOFA))
suppressMessages(library(reticulate))
suppressMessages(library(argparse))
# Define arguments
p <- ArgumentParser(description='')
p$add_argument('-i','--trial', type="integer", help='Trial number')
args <- p$parse_args(commandArgs(TRUE))
if (is.null(args$trial)) args$trial <- 1
source("/Users/ricard/gastrulation_E3.5/metaccrna/mofa/load_settings.R")
# Create MOFAobject
MOFAobject <- createMOFAobject(all_matrix_list)
# Data processing options
DataOptions <- getDefaultDataOptions()
# Model options
ModelOptions <- getDefaultModelOptions(MOFAobject)
ModelOptions$numFactors <- 10
# Training options
TrainOptions <- getDefaultTrainOptions()
TrainOptions$maxiter <- 5000
TrainOptions$tolerance <- 0.01
TrainOptions$DropFactorThreshold <- 0
TrainOptions$seed <- args$trial
# Prepare MOFAobject for training
MOFAmodel <- prepareMOFA(MOFAobject,
DataOptions = DataOptions,
ModelOptions = ModelOptions,
TrainOptions = TrainOptions
)
# Train the model
outfile <- sprintf("%s/hdf5/model_%d.hdf5",io$outdir,args$trial)
model <- runMOFA(MOFAmodel, outfile)
# Model options
ModelOptions <- getDefaultModelOptions(MOFAobject)
ModelOptions$numFactors <- 5
# Training options
TrainOptions <- getDefaultTrainOptions()
TrainOptions$maxiter <- 5000
TrainOptions$tolerance <- 0.10
TrainOptions$DropFactorThreshold <- 0
TrainOptions$seed <- args$trial
# Prepare MOFAobject for training
MOFAmodel <- prepareMOFA(MOFAobject,
DataOptions = DataOptions,
ModelOptions = ModelOptions,
TrainOptions = TrainOptions
)
# Train the model
outfile <- sprintf("%s/hdf5/model_%d.hdf5",io$outdir,args$trial)
model <- runMOFA(MOFAmodel, outfile)
source("/Users/ricard/gastrulation_E3.5/metaccrna/mofa/load_settings.R")
model <- loadModel(paste0(io$outdir,"/hdf5/model_1.hdf5"))
sample_metadata <- fread(io$sample.metadata) %>%
.[,c("sample","id_rna","id_met","id_acc","stage","lineage10x","lineage10x_2","plate")]
sample_metadata_filt <- sample_metadata %>%
setkey(sample) %>% .[MOFA::sampleNames(model)]
opts$views_names <- c(
"met_H3K27ac_distal_E7.5_Ect_intersect12"="Ectoderm Enhancers (met)",
"met_H3K27ac_distal_E7.5_Mes_intersect12"="Mesoderm Enhancers (met)",
"met_H3K27ac_distal_E7.5_End_intersect12"="Endoderm Enhancers (met)",
"acc_H3K27ac_distal_E7.5_Ect_intersect12"="Ectoderm Enhancers (acc)",
"acc_H3K27ac_distal_E7.5_Mes_intersect12"="Mesoderm Enhancers (acc)",
"acc_H3K27ac_distal_E7.5_End_intersect12"="Endoderm Enhancers (acc)",
"met_prom_2000_2000"="Promoters (met)",
"acc_prom_2000_2000"="Promoters (acc)",
"rna" = "RNA expression"
)
viewNames(model) <- stringr::str_replace_all(viewNames(model), opts$views_names)
# plotVarianceExplained(model, cluster=F)
fvar_mk <- calculateVarianceExplained(model)$R2PerFactor
# fvar_mk[fvar_mk<0.001] <- 0
# fvar_mk[fvar_mk>0.05] <- 0.05
# convert matrix to data frame for ggplot2
fvar_mk_df <- reshape2::melt(fvar_mk, varnames=c("factor","view"))
fvar_mk_df$factor <- factor(fvar_mk_df$factor)
# Grid plot with the variance explained per factor and view
p <- ggplot(fvar_mk_df, aes_string(x="view",y="factor")) +
geom_tile(aes_string(fill="value"), color="black") +
guides(fill=guide_colorbar("R2")) +
scale_fill_gradientn(colors=c("gray97","darkblue"), guide="colorbar") +
ylab("Latent factor") +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(size=11, angle=60, hjust=1, vjust=1, color="black"),
axis.text.y = element_text(size=12, color="black"),
axis.title.y = element_text(size=15),
axis.line = element_blank(),
axis.ticks =  element_blank(),
panel.background = element_blank()
)
print(p)
# pdf(paste0(io$outdir,"/pdf/varianceExplained.pdf"), useDingbats = F, onefile = F, width=12, height=5)
# p
# dev.off()
p <- plotFactorScatter(model,
factors=c(1,2),
color_by=sample_metadata_filt$lineage10x_2,
dot_size = 1.5
)
p <- p + scale_color_manual(values=opts$colors)
print(p)
p <- plotFactorScatter(model,
factors=c(1,2),
color_by=sample_metadata_filt$lineage10x_2,
dot_size = 1.5
)
# p <- p + scale_color_manual(values=opts$colors)
print(p)
# pdf(paste0(io$outdir,"/pdf/scatterplot_F1vsF2_v2.pdf"), useDingbats = F, onefile = F, width=6, height=4)
# print(p)
# dev.off()
View(sample_metadata_filt)
p <- plotFactorScatter(model,
factors=c(1,3),
color_by=sample_metadata_filt$lineage10x_2,
dot_size = 1.5
)
# p <- p + scale_color_manual(values=opts$colors)
print(p)
# pdf(paste0(io$outdir,"/pdf/scatterplot_F1vsF2_v2.pdf"), useDingbats = F, onefile = F, width=6, height=4)
# print(p)
# dev.off()
p <- plotFactorScatter(model,
factors=c(2,3),
color_by=sample_metadata_filt$lineage10x_2,
dot_size = 1.5
)
# p <- p + scale_color_manual(values=opts$colors)
print(p)
# pdf(paste0(io$outdir,"/pdf/scatterplot_F1vsF2_v2.pdf"), useDingbats = F, onefile = F, width=6, height=4)
# print(p)
# dev.off()
p <- plotFactorScatter(model,
factors=c(1,3),
color_by=sample_metadata_filt$lineage10x_2,
dot_size = 1.5
)
# p <- p + scale_color_manual(values=opts$colors)
print(p)
# pdf(paste0(io$outdir,"/pdf/scatterplot_F1vsF2_v2.pdf"), useDingbats = F, onefile = F, width=6, height=4)
# print(p)
# dev.off()
Z <- getExpectations(model)
Z <- getFactors(model)
View(Z)
View(sample_metadata_filt)
plotFactorCor(model)
p <- plotFactorScatter(model,
factors=c(1,4),
color_by=sample_metadata_filt$lineage10x_2,
dot_size = 1.5
)
# p <- p + scale_color_manual(values=opts$colors)
print(p)
# pdf(paste0(io$outdir,"/pdf/scatterplot_F1vsF2_v2.pdf"), useDingbats = F, onefile = F, width=6, height=4)
# print(p)
# dev.off()
plotDataOverview(mdoel)
plotDataOverview(model)
